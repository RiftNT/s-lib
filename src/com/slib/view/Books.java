/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.slib.view;

import com.slib.dao.BookDAO;
import com.slib.dao.BookDAOImpl;
import com.slib.utils.BookUtils;
import com.slib.utils.CategoryUtils;
import com.slib.utils.DialogUtils;
import com.slib.utils.IssueReturnUtils;
import com.slib.utils.PublisherUtils;

/**
 *
 * @author User
 */
public class Books extends javax.swing.JFrame {

    /**
     * Creates new form Books
     */
    public Books() {
        BookDAO DAO = new BookDAOImpl();

        initComponents();

        DAO.loadBook(BooksTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        CategoryField1 = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TitleField = new javax.swing.JTextField();
        IsbnField = new javax.swing.JTextField();
        PagesField = new javax.swing.JTextField();
        EditionField = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        BooksTable = new javax.swing.JTable();
        CategoryField = new javax.swing.JTextField();
        PublisherField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        StatusField = new javax.swing.JComboBox<>();

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 0));
        jLabel5.setText("Category");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 0, 51));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 0));
        jLabel1.setText("Book");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("Title");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("ISBN");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 0));
        jLabel4.setText("Category");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 0));
        jLabel6.setText("Publisher");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 0));
        jLabel8.setText("Pages");

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 0));
        jLabel9.setText("Edition");

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        BooksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ISBN", "Title", "Category", "Publisher", "Pages", "Edition", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BooksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BooksTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BooksTable);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 0));
        jLabel10.setText("Status");

        StatusField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(DeleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(CancelButton))
                            .addComponent(EditionField)
                            .addComponent(PagesField)
                            .addComponent(IsbnField)
                            .addComponent(TitleField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(AddButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(UpdateButton))
                            .addComponent(CategoryField)
                            .addComponent(PublisherField)
                            .addComponent(StatusField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(IsbnField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(CategoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(PublisherField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(PagesField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(EditionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(StatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddButton)
                            .addComponent(UpdateButton))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DeleteButton)
                            .addComponent(CancelButton))))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        BookDAO DAO = new BookDAOImpl();

        String isbn = IsbnField.getText();
        String title = TitleField.getText();
        String catName = CategoryField.getText();
        String pubName = PublisherField.getText();
        String pagesVal = PagesField.getText();
        String editionVal = EditionField.getText();
        Object selectedStatus = StatusField.getSelectedItem();
        String status = (String) selectedStatus;
        int pages;
        int edition;

        try {
            pages = Integer.parseInt(pagesVal);
            edition = Integer.parseInt(editionVal);
        } catch (NumberFormatException e) {
            DialogUtils.showErrorDialog(this, "Pages and edition field must be numeric");
            return;
        }
        if (isbn.isEmpty() || title.isEmpty() || catName.isEmpty() || pubName.isEmpty() || pagesVal.isEmpty() || editionVal.isEmpty()) {
            DialogUtils.showErrorDialog(this, "All Fields must be complete");
            return;
        }
        if (pages == -1 || edition == -1) {
            return;
        }
        if (BookUtils.bookIsDeleted(isbn)) {
            BookUtils.bookRecover(isbn);
            DialogUtils.showSuccessDialog(this, "Book recovered");
            return;
        }
        if (BookUtils.bookIsbnExists(isbn)) {
            DialogUtils.showErrorDialog(this, "ISBN already exists");
            return;
        }
        if (isbn.length() != 10 && isbn.length() != 13) {
            DialogUtils.showErrorDialog(this, "The ISBN must be 10 or 13 characters long");
            return;
        }
        if (!CategoryUtils.categoryNameExists(catName)) {
            DialogUtils.showErrorDialog(this, "Category does not exist");
            return;
        }
        if (!PublisherUtils.publisherNameExists(pubName)) {
            DialogUtils.showErrorDialog(this, "Publisher does not exist");
            return;
        }

        DAO.createBook(isbn, title, catName, pubName, pages, edition, status);
        DialogUtils.showSuccessDialog(this, "Created successfully");
        ResetFields();

        DAO.loadBook(BooksTable);
    }//GEN-LAST:event_AddButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        BookDAO DAO = new BookDAOImpl();

        String isbn = IsbnField.getText();

        if (isbn.isEmpty()) {
            DialogUtils.showErrorDialog(this, "ISBN field is empty");
            return;
        }
        if (BookUtils.bookIsDeleted(isbn)) {
            DialogUtils.showErrorDialog(this, "Book is already deleted");
            return;
        }
        if (IssueReturnUtils.isCurrentlyIssuedBook(isbn)) {
            DialogUtils.showErrorDialog(this, "Book is currently issued");
            return;
        }

        DAO.deleteBook(isbn);
        DAO.loadBook(BooksTable);
        DialogUtils.showSuccessDialog(this, "Deleted successfully");
        ResetFields();
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void BooksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BooksTableMouseClicked
        int row = BooksTable.getSelectedRow();

        Object isbn = BooksTable.getValueAt(row, 0);
        Object title = BooksTable.getValueAt(row, 1);
        Object catName = BooksTable.getValueAt(row, 2);
        Object pubName = BooksTable.getValueAt(row, 3);
        Object pages = BooksTable.getValueAt(row, 4);
        Object edition = BooksTable.getValueAt(row, 5);
        Object status = BooksTable.getValueAt(row, 6);

        IsbnField.setText(isbn.toString());
        TitleField.setText(title.toString());
        CategoryField.setText(catName.toString());
        PublisherField.setText(pubName.toString());
        PagesField.setText(pages.toString());
        EditionField.setText(edition.toString());
        StatusField.setSelectedItem(status);
    }//GEN-LAST:event_BooksTableMouseClicked

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        BookDAO DAO = new BookDAOImpl();

        String isbn = IsbnField.getText();
        String title = TitleField.getText();
        String catName = CategoryField.getText();
        String pubName = PublisherField.getText();
        String pagesVal = PagesField.getText();
        String editionVal = EditionField.getText();
        Object selectedStatus = StatusField.getSelectedItem();
        String status = (String) selectedStatus;
        int pages;
        int edition;

        try {
            pages = Integer.parseInt(pagesVal);
            edition = Integer.parseInt(editionVal);
        } catch (NumberFormatException e) {
            DialogUtils.showErrorDialog(this, "Pages and edition field must be numeric");
            return;
        }
        if (isbn.isEmpty() || title.isEmpty() || catName.isEmpty() || pubName.isEmpty() || pagesVal.isEmpty() || editionVal.isEmpty()) {
            DialogUtils.showErrorDialog(this, "All Fields must be complete");
            return;
        }
        if (!BookUtils.bookIsbnExists(isbn)) {
            DialogUtils.showErrorDialog(this, "ISBN does not exist");
            return;
        }
        if (!CategoryUtils.categoryNameExists(catName)) {
            DialogUtils.showErrorDialog(this, "Category does not exist");
            return;
        }
        if (!PublisherUtils.publisherNameExists(pubName)) {
            DialogUtils.showErrorDialog(this, "Publisher does not exist");
            return;
        }

        DAO.updateBook(isbn, title, catName, pubName, pages, edition, status);
        DAO.loadBook(BooksTable);
        DialogUtils.showSuccessDialog(this, "Updated Successfully");

    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        index frame = new index();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ResetFields() {
        IsbnField.setText("");
        TitleField.setText("");
        CategoryField.setText("");
        PublisherField.setText("");
        PagesField.setText("");
        EditionField.setText("");
        StatusField.setSelectedItem("Available");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Books.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Books().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JTable BooksTable;
    private javax.swing.JButton CancelButton;
    private javax.swing.JTextField CategoryField;
    private javax.swing.JTextField CategoryField1;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextField EditionField;
    private javax.swing.JTextField IsbnField;
    private javax.swing.JTextField PagesField;
    private javax.swing.JTextField PublisherField;
    private javax.swing.JComboBox<String> StatusField;
    private javax.swing.JTextField TitleField;
    private javax.swing.JButton UpdateButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
